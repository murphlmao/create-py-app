name: Build & Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          rust-version: stable

      - name: Run Tests
        run: cargo test --all

  tag-and-release:
    name: Tag & Release
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Extract Version from Cargo.toml
        id: version
        run: echo "VERSION=$(grep -m1 '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag -a v${{ env.VERSION }} -m "Release v${{ env.VERSION }}"
          git push origin v${{ env.VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    needs: tag-and-release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Target
        run: rustup target add x86_64-pc-windows-gnu

      - name: Build Windows Executable
        run: cargo build --release --target=x86_64-pc-windows-gnu

      - name: Install Inno Setup
        run: choco install innosetup

      - name: Package Windows Installer
        run: iscc .\scripts\ci\installer.iss

      - name: Upload Windows Installer
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: CreatePyAppInstaller.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    needs: tag-and-release
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build Linux Executable
        run: cargo build --release

      - name: Upload Linux Binary
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: target/release/create-py-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
